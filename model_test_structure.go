/*
Galasa Ecosystem API

The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.

API version: 0.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package galasaapi

import (
	"encoding/json"
)

// checks if the TestStructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestStructure{}

// TestStructure struct for TestStructure
type TestStructure struct {
	RunName *string `json:"runName,omitempty"`
	Bundle *string `json:"bundle,omitempty"`
	TestName *string `json:"testName,omitempty"`
	TestShortName *string `json:"testShortName,omitempty"`
	Requestor *string `json:"requestor,omitempty"`
	Status *string `json:"status,omitempty"`
	Result *string `json:"result,omitempty"`
	Queued *string `json:"queued,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
	EndTime *string `json:"endTime,omitempty"`
	Methods []TestMethod `json:"methods,omitempty"`
}

// NewTestStructure instantiates a new TestStructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestStructure() *TestStructure {
	this := TestStructure{}
	return &this
}

// NewTestStructureWithDefaults instantiates a new TestStructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestStructureWithDefaults() *TestStructure {
	this := TestStructure{}
	return &this
}

// GetRunName returns the RunName field value if set, zero value otherwise.
func (o *TestStructure) GetRunName() string {
	if o == nil || IsNil(o.RunName) {
		var ret string
		return ret
	}
	return *o.RunName
}

// GetRunNameOk returns a tuple with the RunName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetRunNameOk() (*string, bool) {
	if o == nil || IsNil(o.RunName) {
		return nil, false
	}
	return o.RunName, true
}

// HasRunName returns a boolean if a field has been set.
func (o *TestStructure) HasRunName() bool {
	if o != nil && !IsNil(o.RunName) {
		return true
	}

	return false
}

// SetRunName gets a reference to the given string and assigns it to the RunName field.
func (o *TestStructure) SetRunName(v string) {
	o.RunName = &v
}

// GetBundle returns the Bundle field value if set, zero value otherwise.
func (o *TestStructure) GetBundle() string {
	if o == nil || IsNil(o.Bundle) {
		var ret string
		return ret
	}
	return *o.Bundle
}

// GetBundleOk returns a tuple with the Bundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetBundleOk() (*string, bool) {
	if o == nil || IsNil(o.Bundle) {
		return nil, false
	}
	return o.Bundle, true
}

// HasBundle returns a boolean if a field has been set.
func (o *TestStructure) HasBundle() bool {
	if o != nil && !IsNil(o.Bundle) {
		return true
	}

	return false
}

// SetBundle gets a reference to the given string and assigns it to the Bundle field.
func (o *TestStructure) SetBundle(v string) {
	o.Bundle = &v
}

// GetTestName returns the TestName field value if set, zero value otherwise.
func (o *TestStructure) GetTestName() string {
	if o == nil || IsNil(o.TestName) {
		var ret string
		return ret
	}
	return *o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetTestNameOk() (*string, bool) {
	if o == nil || IsNil(o.TestName) {
		return nil, false
	}
	return o.TestName, true
}

// HasTestName returns a boolean if a field has been set.
func (o *TestStructure) HasTestName() bool {
	if o != nil && !IsNil(o.TestName) {
		return true
	}

	return false
}

// SetTestName gets a reference to the given string and assigns it to the TestName field.
func (o *TestStructure) SetTestName(v string) {
	o.TestName = &v
}

// GetTestShortName returns the TestShortName field value if set, zero value otherwise.
func (o *TestStructure) GetTestShortName() string {
	if o == nil || IsNil(o.TestShortName) {
		var ret string
		return ret
	}
	return *o.TestShortName
}

// GetTestShortNameOk returns a tuple with the TestShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetTestShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.TestShortName) {
		return nil, false
	}
	return o.TestShortName, true
}

// HasTestShortName returns a boolean if a field has been set.
func (o *TestStructure) HasTestShortName() bool {
	if o != nil && !IsNil(o.TestShortName) {
		return true
	}

	return false
}

// SetTestShortName gets a reference to the given string and assigns it to the TestShortName field.
func (o *TestStructure) SetTestShortName(v string) {
	o.TestShortName = &v
}

// GetRequestor returns the Requestor field value if set, zero value otherwise.
func (o *TestStructure) GetRequestor() string {
	if o == nil || IsNil(o.Requestor) {
		var ret string
		return ret
	}
	return *o.Requestor
}

// GetRequestorOk returns a tuple with the Requestor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetRequestorOk() (*string, bool) {
	if o == nil || IsNil(o.Requestor) {
		return nil, false
	}
	return o.Requestor, true
}

// HasRequestor returns a boolean if a field has been set.
func (o *TestStructure) HasRequestor() bool {
	if o != nil && !IsNil(o.Requestor) {
		return true
	}

	return false
}

// SetRequestor gets a reference to the given string and assigns it to the Requestor field.
func (o *TestStructure) SetRequestor(v string) {
	o.Requestor = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TestStructure) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TestStructure) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TestStructure) SetStatus(v string) {
	o.Status = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TestStructure) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TestStructure) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *TestStructure) SetResult(v string) {
	o.Result = &v
}

// GetQueued returns the Queued field value if set, zero value otherwise.
func (o *TestStructure) GetQueued() string {
	if o == nil || IsNil(o.Queued) {
		var ret string
		return ret
	}
	return *o.Queued
}

// GetQueuedOk returns a tuple with the Queued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetQueuedOk() (*string, bool) {
	if o == nil || IsNil(o.Queued) {
		return nil, false
	}
	return o.Queued, true
}

// HasQueued returns a boolean if a field has been set.
func (o *TestStructure) HasQueued() bool {
	if o != nil && !IsNil(o.Queued) {
		return true
	}

	return false
}

// SetQueued gets a reference to the given string and assigns it to the Queued field.
func (o *TestStructure) SetQueued(v string) {
	o.Queued = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *TestStructure) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *TestStructure) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *TestStructure) SetStartTime(v string) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *TestStructure) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *TestStructure) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *TestStructure) SetEndTime(v string) {
	o.EndTime = &v
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *TestStructure) GetMethods() []TestMethod {
	if o == nil || IsNil(o.Methods) {
		var ret []TestMethod
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStructure) GetMethodsOk() ([]TestMethod, bool) {
	if o == nil || IsNil(o.Methods) {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *TestStructure) HasMethods() bool {
	if o != nil && !IsNil(o.Methods) {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []TestMethod and assigns it to the Methods field.
func (o *TestStructure) SetMethods(v []TestMethod) {
	o.Methods = v
}

func (o TestStructure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestStructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RunName) {
		toSerialize["runName"] = o.RunName
	}
	if !IsNil(o.Bundle) {
		toSerialize["bundle"] = o.Bundle
	}
	if !IsNil(o.TestName) {
		toSerialize["testName"] = o.TestName
	}
	if !IsNil(o.TestShortName) {
		toSerialize["testShortName"] = o.TestShortName
	}
	if !IsNil(o.Requestor) {
		toSerialize["requestor"] = o.Requestor
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Queued) {
		toSerialize["queued"] = o.Queued
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.Methods) {
		toSerialize["methods"] = o.Methods
	}
	return toSerialize, nil
}

type NullableTestStructure struct {
	value *TestStructure
	isSet bool
}

func (v NullableTestStructure) Get() *TestStructure {
	return v.value
}

func (v *NullableTestStructure) Set(val *TestStructure) {
	v.value = val
	v.isSet = true
}

func (v NullableTestStructure) IsSet() bool {
	return v.isSet
}

func (v *NullableTestStructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestStructure(val *TestStructure) *NullableTestStructure {
	return &NullableTestStructure{value: val, isSet: true}
}

func (v NullableTestStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestStructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


