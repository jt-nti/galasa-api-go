/*
Galasa Ecosystem API

The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.

API version: 0.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package galasaapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// UsersAPIAPIService UsersAPIAPI service
type UsersAPIAPIService service

type ApiGetUserByLoginIdRequest struct {
	ctx context.Context
	ApiService *UsersAPIAPIService
	loginId *string
	clientApiVersion *string
}

// The loginId of the user whose details will be returned.
func (r ApiGetUserByLoginIdRequest) LoginId(loginId string) ApiGetUserByLoginIdRequest {
	r.loginId = &loginId
	return r
}

func (r ApiGetUserByLoginIdRequest) ClientApiVersion(clientApiVersion string) ApiGetUserByLoginIdRequest {
	r.clientApiVersion = &clientApiVersion
	return r
}

func (r ApiGetUserByLoginIdRequest) Execute() ([]UserData, *http.Response, error) {
	return r.ApiService.GetUserByLoginIdExecute(r)
}

/*
GetUserByLoginId Returns the details of the requesting user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUserByLoginIdRequest
*/
func (a *UsersAPIAPIService) GetUserByLoginId(ctx context.Context) ApiGetUserByLoginIdRequest {
	return ApiGetUserByLoginIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []UserData
func (a *UsersAPIAPIService) GetUserByLoginIdExecute(r ApiGetUserByLoginIdRequest) ([]UserData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UserData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIAPIService.GetUserByLoginId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.loginId == nil {
		return localVarReturnValue, nil, reportError("loginId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "loginId", r.loginId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "ClientApiVersion", r.clientApiVersion, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
