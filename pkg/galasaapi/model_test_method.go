/*
Galasa Ecosystem API

The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.

API version: 0.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pkg/galasaapi

import (
	"encoding/json"
)

// checks if the TestMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestMethod{}

// TestMethod struct for TestMethod
type TestMethod struct {
	ClassName *string `json:"className,omitempty"`
	MethodName *string `json:"methodName,omitempty"`
	Type *string `json:"type,omitempty"`
	Status *string `json:"status,omitempty"`
	Result *string `json:"result,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
	EndTime *string `json:"endTime,omitempty"`
	RunLogStart *int32 `json:"runLogStart,omitempty"`
	RunLogEnd *int32 `json:"runLogEnd,omitempty"`
	Befores []map[string]interface{} `json:"befores,omitempty"`
	Afters []map[string]interface{} `json:"afters,omitempty"`
}

// NewTestMethod instantiates a new TestMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestMethod() *TestMethod {
	this := TestMethod{}
	return &this
}

// NewTestMethodWithDefaults instantiates a new TestMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestMethodWithDefaults() *TestMethod {
	this := TestMethod{}
	return &this
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *TestMethod) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *TestMethod) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *TestMethod) SetClassName(v string) {
	o.ClassName = &v
}

// GetMethodName returns the MethodName field value if set, zero value otherwise.
func (o *TestMethod) GetMethodName() string {
	if o == nil || IsNil(o.MethodName) {
		var ret string
		return ret
	}
	return *o.MethodName
}

// GetMethodNameOk returns a tuple with the MethodName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetMethodNameOk() (*string, bool) {
	if o == nil || IsNil(o.MethodName) {
		return nil, false
	}
	return o.MethodName, true
}

// HasMethodName returns a boolean if a field has been set.
func (o *TestMethod) HasMethodName() bool {
	if o != nil && !IsNil(o.MethodName) {
		return true
	}

	return false
}

// SetMethodName gets a reference to the given string and assigns it to the MethodName field.
func (o *TestMethod) SetMethodName(v string) {
	o.MethodName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TestMethod) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TestMethod) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TestMethod) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TestMethod) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TestMethod) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TestMethod) SetStatus(v string) {
	o.Status = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TestMethod) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TestMethod) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *TestMethod) SetResult(v string) {
	o.Result = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *TestMethod) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *TestMethod) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *TestMethod) SetStartTime(v string) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *TestMethod) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *TestMethod) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *TestMethod) SetEndTime(v string) {
	o.EndTime = &v
}

// GetRunLogStart returns the RunLogStart field value if set, zero value otherwise.
func (o *TestMethod) GetRunLogStart() int32 {
	if o == nil || IsNil(o.RunLogStart) {
		var ret int32
		return ret
	}
	return *o.RunLogStart
}

// GetRunLogStartOk returns a tuple with the RunLogStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetRunLogStartOk() (*int32, bool) {
	if o == nil || IsNil(o.RunLogStart) {
		return nil, false
	}
	return o.RunLogStart, true
}

// HasRunLogStart returns a boolean if a field has been set.
func (o *TestMethod) HasRunLogStart() bool {
	if o != nil && !IsNil(o.RunLogStart) {
		return true
	}

	return false
}

// SetRunLogStart gets a reference to the given int32 and assigns it to the RunLogStart field.
func (o *TestMethod) SetRunLogStart(v int32) {
	o.RunLogStart = &v
}

// GetRunLogEnd returns the RunLogEnd field value if set, zero value otherwise.
func (o *TestMethod) GetRunLogEnd() int32 {
	if o == nil || IsNil(o.RunLogEnd) {
		var ret int32
		return ret
	}
	return *o.RunLogEnd
}

// GetRunLogEndOk returns a tuple with the RunLogEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetRunLogEndOk() (*int32, bool) {
	if o == nil || IsNil(o.RunLogEnd) {
		return nil, false
	}
	return o.RunLogEnd, true
}

// HasRunLogEnd returns a boolean if a field has been set.
func (o *TestMethod) HasRunLogEnd() bool {
	if o != nil && !IsNil(o.RunLogEnd) {
		return true
	}

	return false
}

// SetRunLogEnd gets a reference to the given int32 and assigns it to the RunLogEnd field.
func (o *TestMethod) SetRunLogEnd(v int32) {
	o.RunLogEnd = &v
}

// GetBefores returns the Befores field value if set, zero value otherwise.
func (o *TestMethod) GetBefores() []map[string]interface{} {
	if o == nil || IsNil(o.Befores) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Befores
}

// GetBeforesOk returns a tuple with the Befores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetBeforesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Befores) {
		return nil, false
	}
	return o.Befores, true
}

// HasBefores returns a boolean if a field has been set.
func (o *TestMethod) HasBefores() bool {
	if o != nil && !IsNil(o.Befores) {
		return true
	}

	return false
}

// SetBefores gets a reference to the given []map[string]interface{} and assigns it to the Befores field.
func (o *TestMethod) SetBefores(v []map[string]interface{}) {
	o.Befores = v
}

// GetAfters returns the Afters field value if set, zero value otherwise.
func (o *TestMethod) GetAfters() []map[string]interface{} {
	if o == nil || IsNil(o.Afters) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Afters
}

// GetAftersOk returns a tuple with the Afters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestMethod) GetAftersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Afters) {
		return nil, false
	}
	return o.Afters, true
}

// HasAfters returns a boolean if a field has been set.
func (o *TestMethod) HasAfters() bool {
	if o != nil && !IsNil(o.Afters) {
		return true
	}

	return false
}

// SetAfters gets a reference to the given []map[string]interface{} and assigns it to the Afters field.
func (o *TestMethod) SetAfters(v []map[string]interface{}) {
	o.Afters = v
}

func (o TestMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !IsNil(o.MethodName) {
		toSerialize["methodName"] = o.MethodName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.RunLogStart) {
		toSerialize["runLogStart"] = o.RunLogStart
	}
	if !IsNil(o.RunLogEnd) {
		toSerialize["runLogEnd"] = o.RunLogEnd
	}
	if !IsNil(o.Befores) {
		toSerialize["befores"] = o.Befores
	}
	if !IsNil(o.Afters) {
		toSerialize["afters"] = o.Afters
	}
	return toSerialize, nil
}

type NullableTestMethod struct {
	value *TestMethod
	isSet bool
}

func (v NullableTestMethod) Get() *TestMethod {
	return v.value
}

func (v *NullableTestMethod) Set(val *TestMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableTestMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableTestMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestMethod(val *TestMethod) *NullableTestMethod {
	return &NullableTestMethod{value: val, isSet: true}
}

func (v NullableTestMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


