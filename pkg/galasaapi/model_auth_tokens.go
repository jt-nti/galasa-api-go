/*
Galasa Ecosystem API

The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.

API version: 0.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pkg/galasaapi

import (
	"encoding/json"
)

// checks if the AuthTokens type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthTokens{}

// AuthTokens struct for AuthTokens
type AuthTokens struct {
	Tokens []AuthToken `json:"tokens,omitempty"`
}

// NewAuthTokens instantiates a new AuthTokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthTokens() *AuthTokens {
	this := AuthTokens{}
	return &this
}

// NewAuthTokensWithDefaults instantiates a new AuthTokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthTokensWithDefaults() *AuthTokens {
	this := AuthTokens{}
	return &this
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *AuthTokens) GetTokens() []AuthToken {
	if o == nil || IsNil(o.Tokens) {
		var ret []AuthToken
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTokens) GetTokensOk() ([]AuthToken, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *AuthTokens) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []AuthToken and assigns it to the Tokens field.
func (o *AuthTokens) SetTokens(v []AuthToken) {
	o.Tokens = v
}

func (o AuthTokens) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthTokens) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	return toSerialize, nil
}

type NullableAuthTokens struct {
	value *AuthTokens
	isSet bool
}

func (v NullableAuthTokens) Get() *AuthTokens {
	return v.value
}

func (v *NullableAuthTokens) Set(val *AuthTokens) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthTokens(val *AuthTokens) *NullableAuthTokens {
	return &NullableAuthTokens{value: val, isSet: true}
}

func (v NullableAuthTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


