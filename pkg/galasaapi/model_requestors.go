/*
Galasa Ecosystem API

The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.

API version: 0.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pkg/galasaapi

import (
	"encoding/json"
)

// checks if the Requestors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Requestors{}

// Requestors struct for Requestors
type Requestors struct {
	Requestors []string `json:"requestors,omitempty"`
}

// NewRequestors instantiates a new Requestors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestors() *Requestors {
	this := Requestors{}
	return &this
}

// NewRequestorsWithDefaults instantiates a new Requestors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestorsWithDefaults() *Requestors {
	this := Requestors{}
	return &this
}

// GetRequestors returns the Requestors field value if set, zero value otherwise.
func (o *Requestors) GetRequestors() []string {
	if o == nil || IsNil(o.Requestors) {
		var ret []string
		return ret
	}
	return o.Requestors
}

// GetRequestorsOk returns a tuple with the Requestors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Requestors) GetRequestorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Requestors) {
		return nil, false
	}
	return o.Requestors, true
}

// HasRequestors returns a boolean if a field has been set.
func (o *Requestors) HasRequestors() bool {
	if o != nil && !IsNil(o.Requestors) {
		return true
	}

	return false
}

// SetRequestors gets a reference to the given []string and assigns it to the Requestors field.
func (o *Requestors) SetRequestors(v []string) {
	o.Requestors = v
}

func (o Requestors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Requestors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Requestors) {
		toSerialize["requestors"] = o.Requestors
	}
	return toSerialize, nil
}

type NullableRequestors struct {
	value *Requestors
	isSet bool
}

func (v NullableRequestors) Get() *Requestors {
	return v.value
}

func (v *NullableRequestors) Set(val *Requestors) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestors) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestors(val *Requestors) *NullableRequestors {
	return &NullableRequestors{value: val, isSet: true}
}

func (v NullableRequestors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


