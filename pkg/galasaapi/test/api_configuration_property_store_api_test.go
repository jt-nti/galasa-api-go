/*
Galasa Ecosystem API

Testing ConfigurationPropertyStoreAPIAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pkg/galasaapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_pkg/galasaapi_ConfigurationPropertyStoreAPIAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConfigurationPropertyStoreAPIAPIService CreateCpsProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.CreateCpsProperty(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationPropertyStoreAPIAPIService DeleteCpsProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string
		var propertyName string

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.DeleteCpsProperty(context.Background(), namespace, propertyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationPropertyStoreAPIAPIService GetAllCpsNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.GetAllCpsNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationPropertyStoreAPIAPIService GetCpsNamespaceCascadeProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string
		var prefix string
		var suffix string

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.GetCpsNamespaceCascadeProperty(context.Background(), namespace, prefix, suffix).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationPropertyStoreAPIAPIService GetCpsNamespaceProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.GetCpsNamespaceProperties(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationPropertyStoreAPIAPIService GetCpsNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.GetCpsNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationPropertyStoreAPIAPIService GetCpsProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string
		var propertyName string

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.GetCpsProperty(context.Background(), namespace, propertyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationPropertyStoreAPIAPIService PutCpsNamespaceProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string
		var property string

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.PutCpsNamespaceProperty(context.Background(), namespace, property).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationPropertyStoreAPIAPIService QueryCpsNamespaceProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.QueryCpsNamespaceProperties(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationPropertyStoreAPIAPIService UpdateCpsProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string
		var propertyName string

		resp, httpRes, err := apiClient.ConfigurationPropertyStoreAPIAPI.UpdateCpsProperty(context.Background(), namespace, propertyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
