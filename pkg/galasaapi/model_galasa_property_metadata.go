/*
Galasa Ecosystem API

The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.

API version: 0.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pkg/galasaapi

import (
	"encoding/json"
)

// checks if the GalasaPropertyMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GalasaPropertyMetadata{}

// GalasaPropertyMetadata struct for GalasaPropertyMetadata
type GalasaPropertyMetadata struct {
	// Property Namespace. First character of the namespace must be in the 'a'-'z' range, and following characters can be 'a'-'z' or '0'-'9' 
	Namespace *string `json:"namespace,omitempty"`
	// Property Name. The first character of the namespace must be in the 'a'-'z' or 'A'-'Z' ranges, and following characters can be 'a'-'z', 'A'-'Z', '0'-'9', '.' (period), '-' (dash) or '_' (underscore). The property name is made of 'parts'. Each part must be separated by a period character. There must be at least two parts in the property name. The last character cannot be a period character. 
	Name *string `json:"name,omitempty"`
}

// NewGalasaPropertyMetadata instantiates a new GalasaPropertyMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGalasaPropertyMetadata() *GalasaPropertyMetadata {
	this := GalasaPropertyMetadata{}
	return &this
}

// NewGalasaPropertyMetadataWithDefaults instantiates a new GalasaPropertyMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGalasaPropertyMetadataWithDefaults() *GalasaPropertyMetadata {
	this := GalasaPropertyMetadata{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *GalasaPropertyMetadata) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GalasaPropertyMetadata) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *GalasaPropertyMetadata) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *GalasaPropertyMetadata) SetNamespace(v string) {
	o.Namespace = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GalasaPropertyMetadata) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GalasaPropertyMetadata) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GalasaPropertyMetadata) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GalasaPropertyMetadata) SetName(v string) {
	o.Name = &v
}

func (o GalasaPropertyMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GalasaPropertyMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableGalasaPropertyMetadata struct {
	value *GalasaPropertyMetadata
	isSet bool
}

func (v NullableGalasaPropertyMetadata) Get() *GalasaPropertyMetadata {
	return v.value
}

func (v *NullableGalasaPropertyMetadata) Set(val *GalasaPropertyMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableGalasaPropertyMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableGalasaPropertyMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGalasaPropertyMetadata(val *GalasaPropertyMetadata) *NullableGalasaPropertyMetadata {
	return &NullableGalasaPropertyMetadata{value: val, isSet: true}
}

func (v NullableGalasaPropertyMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGalasaPropertyMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


