/*
Galasa Ecosystem API

The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.

API version: 0.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pkg/galasaapi

import (
	"encoding/json"
)

// checks if the Artifact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Artifact{}

// Artifact struct for Artifact
type Artifact struct {
	ArtifactPath *string `json:"artifactPath,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
}

// NewArtifact instantiates a new Artifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifact() *Artifact {
	this := Artifact{}
	return &this
}

// NewArtifactWithDefaults instantiates a new Artifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactWithDefaults() *Artifact {
	this := Artifact{}
	return &this
}

// GetArtifactPath returns the ArtifactPath field value if set, zero value otherwise.
func (o *Artifact) GetArtifactPath() string {
	if o == nil || IsNil(o.ArtifactPath) {
		var ret string
		return ret
	}
	return *o.ArtifactPath
}

// GetArtifactPathOk returns a tuple with the ArtifactPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Artifact) GetArtifactPathOk() (*string, bool) {
	if o == nil || IsNil(o.ArtifactPath) {
		return nil, false
	}
	return o.ArtifactPath, true
}

// HasArtifactPath returns a boolean if a field has been set.
func (o *Artifact) HasArtifactPath() bool {
	if o != nil && !IsNil(o.ArtifactPath) {
		return true
	}

	return false
}

// SetArtifactPath gets a reference to the given string and assigns it to the ArtifactPath field.
func (o *Artifact) SetArtifactPath(v string) {
	o.ArtifactPath = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *Artifact) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Artifact) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *Artifact) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *Artifact) SetContentType(v string) {
	o.ContentType = &v
}

func (o Artifact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Artifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArtifactPath) {
		toSerialize["artifactPath"] = o.ArtifactPath
	}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	return toSerialize, nil
}

type NullableArtifact struct {
	value *Artifact
	isSet bool
}

func (v NullableArtifact) Get() *Artifact {
	return v.value
}

func (v *NullableArtifact) Set(val *Artifact) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifact(val *Artifact) *NullableArtifact {
	return &NullableArtifact{value: val, isSet: true}
}

func (v NullableArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


