/*
Galasa Ecosystem API

The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.

API version: 0.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package galasaapi

import (
	"encoding/json"
)

// checks if the ResultNames type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultNames{}

// ResultNames struct for ResultNames
type ResultNames struct {
	Resultnames []string `json:"resultnames,omitempty"`
}

// NewResultNames instantiates a new ResultNames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultNames() *ResultNames {
	this := ResultNames{}
	return &this
}

// NewResultNamesWithDefaults instantiates a new ResultNames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultNamesWithDefaults() *ResultNames {
	this := ResultNames{}
	return &this
}

// GetResultnames returns the Resultnames field value if set, zero value otherwise.
func (o *ResultNames) GetResultnames() []string {
	if o == nil || IsNil(o.Resultnames) {
		var ret []string
		return ret
	}
	return o.Resultnames
}

// GetResultnamesOk returns a tuple with the Resultnames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultNames) GetResultnamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Resultnames) {
		return nil, false
	}
	return o.Resultnames, true
}

// HasResultnames returns a boolean if a field has been set.
func (o *ResultNames) HasResultnames() bool {
	if o != nil && !IsNil(o.Resultnames) {
		return true
	}

	return false
}

// SetResultnames gets a reference to the given []string and assigns it to the Resultnames field.
func (o *ResultNames) SetResultnames(v []string) {
	o.Resultnames = v
}

func (o ResultNames) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultNames) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resultnames) {
		toSerialize["resultnames"] = o.Resultnames
	}
	return toSerialize, nil
}

type NullableResultNames struct {
	value *ResultNames
	isSet bool
}

func (v NullableResultNames) Get() *ResultNames {
	return v.value
}

func (v *NullableResultNames) Set(val *ResultNames) {
	v.value = val
	v.isSet = true
}

func (v NullableResultNames) IsSet() bool {
	return v.isSet
}

func (v *NullableResultNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultNames(val *ResultNames) *NullableResultNames {
	return &NullableResultNames{value: val, isSet: true}
}

func (v NullableResultNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


