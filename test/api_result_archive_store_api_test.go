/*
Galasa Ecosystem API

Testing ResultArchiveStoreAPIAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package galasa-api-go

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_galasa-api-go_ResultArchiveStoreAPIAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResultArchiveStoreAPIAPIService DeleteRasRunById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var runid string

		httpRes, err := apiClient.ResultArchiveStoreAPIAPI.DeleteRasRunById(context.Background(), runid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResultArchiveStoreAPIAPIService GetRasRequestors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResultArchiveStoreAPIAPI.GetRasRequestors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResultArchiveStoreAPIAPIService GetRasResultNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResultArchiveStoreAPIAPI.GetRasResultNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResultArchiveStoreAPIAPIService GetRasRunArtifactByPath", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var runid string
		var artifactPath string

		resp, httpRes, err := apiClient.ResultArchiveStoreAPIAPI.GetRasRunArtifactByPath(context.Background(), runid, artifactPath).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResultArchiveStoreAPIAPIService GetRasRunArtifactList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var runid string

		resp, httpRes, err := apiClient.ResultArchiveStoreAPIAPI.GetRasRunArtifactList(context.Background(), runid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResultArchiveStoreAPIAPIService GetRasRunById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var runid string

		resp, httpRes, err := apiClient.ResultArchiveStoreAPIAPI.GetRasRunById(context.Background(), runid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResultArchiveStoreAPIAPIService GetRasRunLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var runid string

		resp, httpRes, err := apiClient.ResultArchiveStoreAPIAPI.GetRasRunLog(context.Background(), runid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResultArchiveStoreAPIAPIService GetRasSearchRuns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResultArchiveStoreAPIAPI.GetRasSearchRuns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResultArchiveStoreAPIAPIService GetRasTestclasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResultArchiveStoreAPIAPI.GetRasTestclasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResultArchiveStoreAPIAPIService PutRasRunStatusById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var runid string

		resp, httpRes, err := apiClient.ResultArchiveStoreAPIAPI.PutRasRunStatusById(context.Background(), runid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
