/*
Galasa Ecosystem API

The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.

API version: 0.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package galasaapi

import (
	"encoding/json"
)

// checks if the Run type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Run{}

// Run struct for Run
type Run struct {
	RunId *string `json:"runId,omitempty"`
	TestStructure *TestStructure `json:"testStructure,omitempty"`
	Artifacts []Artifact `json:"artifacts,omitempty"`
}

// NewRun instantiates a new Run object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRun() *Run {
	this := Run{}
	return &this
}

// NewRunWithDefaults instantiates a new Run object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunWithDefaults() *Run {
	this := Run{}
	return &this
}

// GetRunId returns the RunId field value if set, zero value otherwise.
func (o *Run) GetRunId() string {
	if o == nil || IsNil(o.RunId) {
		var ret string
		return ret
	}
	return *o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetRunIdOk() (*string, bool) {
	if o == nil || IsNil(o.RunId) {
		return nil, false
	}
	return o.RunId, true
}

// HasRunId returns a boolean if a field has been set.
func (o *Run) HasRunId() bool {
	if o != nil && !IsNil(o.RunId) {
		return true
	}

	return false
}

// SetRunId gets a reference to the given string and assigns it to the RunId field.
func (o *Run) SetRunId(v string) {
	o.RunId = &v
}

// GetTestStructure returns the TestStructure field value if set, zero value otherwise.
func (o *Run) GetTestStructure() TestStructure {
	if o == nil || IsNil(o.TestStructure) {
		var ret TestStructure
		return ret
	}
	return *o.TestStructure
}

// GetTestStructureOk returns a tuple with the TestStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetTestStructureOk() (*TestStructure, bool) {
	if o == nil || IsNil(o.TestStructure) {
		return nil, false
	}
	return o.TestStructure, true
}

// HasTestStructure returns a boolean if a field has been set.
func (o *Run) HasTestStructure() bool {
	if o != nil && !IsNil(o.TestStructure) {
		return true
	}

	return false
}

// SetTestStructure gets a reference to the given TestStructure and assigns it to the TestStructure field.
func (o *Run) SetTestStructure(v TestStructure) {
	o.TestStructure = &v
}

// GetArtifacts returns the Artifacts field value if set, zero value otherwise.
func (o *Run) GetArtifacts() []Artifact {
	if o == nil || IsNil(o.Artifacts) {
		var ret []Artifact
		return ret
	}
	return o.Artifacts
}

// GetArtifactsOk returns a tuple with the Artifacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetArtifactsOk() ([]Artifact, bool) {
	if o == nil || IsNil(o.Artifacts) {
		return nil, false
	}
	return o.Artifacts, true
}

// HasArtifacts returns a boolean if a field has been set.
func (o *Run) HasArtifacts() bool {
	if o != nil && !IsNil(o.Artifacts) {
		return true
	}

	return false
}

// SetArtifacts gets a reference to the given []Artifact and assigns it to the Artifacts field.
func (o *Run) SetArtifacts(v []Artifact) {
	o.Artifacts = v
}

func (o Run) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Run) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RunId) {
		toSerialize["runId"] = o.RunId
	}
	if !IsNil(o.TestStructure) {
		toSerialize["testStructure"] = o.TestStructure
	}
	if !IsNil(o.Artifacts) {
		toSerialize["artifacts"] = o.Artifacts
	}
	return toSerialize, nil
}

type NullableRun struct {
	value *Run
	isSet bool
}

func (v NullableRun) Get() *Run {
	return v.value
}

func (v *NullableRun) Set(val *Run) {
	v.value = val
	v.isSet = true
}

func (v NullableRun) IsSet() bool {
	return v.isSet
}

func (v *NullableRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRun(val *Run) *NullableRun {
	return &NullableRun{value: val, isSet: true}
}

func (v NullableRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


